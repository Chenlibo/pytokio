#!/usr/bin/env python
"""
Process the Darshan daily summary json generated by darshan_daily_summary.py and
generate a scoreboard of top sources of I/O based on user, file system, and
application
"""

import os
import re
import json
import argparse

def process_darshan_perfs(summary_json):
    """
    Ingest the per-log file system summary contained in the summary_json file
    and produce a dictionary with bytes read/written reduced on application
    binary name, user name, and file system.
    """
    summary = json.load(open(summary_json, 'r'))

    regex_filename = re.compile(r'^([^_]+)_(.*?)_id(\d+)_.*.darshan')

    results = {
        'per_user': {},
        'per_fs': {},
        'per_exe': {}
    }
    for darshan_log, counters in summary.iteritems():
        darshan_log_bn = os.path.basename(darshan_log)
        regex_match = regex_filename.search(darshan_log_bn)
        if regex_match:
            username = regex_match.group(1)
            exename = regex_match.group(2)
        elif '_' in darshan_log_bn:
            username = darshan_log_bn.split('_', 1)[0]
            exename = "<unknown>"
        else:
            username = "<unknown>"
            exename = "<unknown>"

        if username not in results['per_user']:
            results['per_user'][username] = {'read_bytes': 0, 'write_bytes': 0}

        for mount in counters.keys():
            if mount != '/':
                results['per_user'][username]['read_bytes'] += counters[mount].get('read_bytes', 0)
                results['per_user'][username]['write_bytes'] += counters[mount].get('write_bytes', 0)
                if mount not in results['per_fs']:
                    results['per_fs'][mount] = {'read_bytes': 0, 'write_bytes': 0}
                results['per_fs'][mount]['read_bytes'] += counters[mount].get('read_bytes', 0)
                results['per_fs'][mount]['write_bytes'] += counters[mount].get('write_bytes', 0)
                if exename not in results['per_exe']:
                    results['per_exe'][exename] = {'read_bytes': 0, 'write_bytes': 0}
                results['per_exe'][exename]['read_bytes'] += counters[mount].get('read_bytes', 0)
                results['per_exe'][exename]['write_bytes'] += counters[mount].get('write_bytes', 0)

    return results

def print_top(categorized_data, max_show=10):
    """
    Print the biggest I/O {users, exes, file systems}
    """
    names = {
        'per_fs': "File Systems",
        'per_exe': "Applications",
        'per_user': "Users",
    }

    categories = 0
    for category, rankings in categorized_data.iteritems():
        name = names.get(category, category)
        if categories > 0:
            print ""
        print "%2s  %20s %20s %20s" % ('#', name, 'Read Bytes', 'Write Bytes')
        print '=' * 66
        displayed = 0
        for winner in sorted(rankings, key=lambda x, r=rankings: r[x]['read_bytes'] + r[x]['write_bytes'], reverse=True):
            displayed += 1
            if displayed > max_show:
                break
            print "%2d. %20.20s %20d %20d" % (displayed, winner, rankings[winner]['read_bytes'], rankings[winner]['write_bytes'])
        categories += 1

def main(argv=None):
    """
    CLI wrapper around process_darshan_perfs()
    """
    parser = argparse.ArgumentParser()
    parser.add_argument("summaryjson", type=str, help="json output of darshan_per_fs_bytes.py")
    parser.add_argument("--json", action='store_true', help="output in json format")
    parser.add_argument("--max-show", type=int, default=10, help="show top N users, apps, file systems")
    args = parser.parse_args(argv)

    results = process_darshan_perfs(args.summaryjson)
    if args.json:
        print json.dumps(results, indent=4, sort_keys=True)
    else:
        print_top(results, max_show=args.max_show)

if __name__ == "__main__":
    main()
